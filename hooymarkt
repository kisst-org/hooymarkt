#!/usr/bin/env bash
# Script Name: render-manifests
# Description: render helm manifests for applications and environments
# Author: Mark Hooijkaas
# Sourcecode: https://github.com/kisst-org/markisst/
# License: Apache License version 2.0
# Install or update to newest version with following command:
#   curl -OL https://raw.githubusercontent.com/kisst-org/markisst/refs/heads/main/render-manifests && chmod 755 render-manifests

set -eu
shopt -s extglob
script_name="${0}"

read_config() {
    declare -A -g aliases
    declare -A -g kubectl_options
    declare -A -g action_funcs
    main_command=forall_apps_envs
    if [[ -f ${RENDER_CONFIG_FILE} ]]; then
        source ${RENDER_CONFIG_FILE}
    fi
    default_renderer=${RENDER_DEFAULT_RENDERER:-helm}
}


main() {
    : ${RENDER_CONFIG_FILE:=${RENDER_ROOT_DIR:-.}/render.config}
    read_config
    parse_options "${@}"
    $main_command
}

forall_apps_envs() {
    for f in $def_files; do
        for env in $envs; do
            run_actions $f $actions
        done
    done
}

# The same, but do this per env first
forall_envs_apps() {
    for env in $envs; do
        for f in $def_files; do
            run_actions $f $actions
        done
    done
}

run_actions() {
    local rendef_file=$1
    shift
    verbose reading render-def ${rendef_file} for ${envs}
    renderer=$default_renderer
    source ${rendef_file}
    init_${renderer}
    if $skip; then
        info skipping $appname $env
    else
        for action in "${@}" ; do
            info running $action for ${output_dir}
            verbose running ${action_funcs[$action]}
            ${action_funcs[$action]}
        done
    fi
}

verbose() { if ${log_verbose:-false}; then printf "%s " "${@}"; echo; fi }
info()    { if ${log_info:-true};     then echo "${@}"; fi }
get_lhs() { echo ${1/*([^=])=/}; } # remove the lhs (left hand side) rhs=lhs

parse_options() {
    def_files=""
    envs=""
    actions=render
    while [ ! $# -eq 0 ]; do
        arg=$1
        if [[ ${aliases[$arg]:-none} != none ]]; then
            arg=${aliases[$arg]}
        fi
        case $arg in
            -h|--help|help) main_command=show_help;;
            -v|--verbose)   log_verbose=true; log_info=true;;
            -q|--quiet)     log_verbose=false; log_info=false;;
            --debug)        set -x;;
            --env=*)        envs+=" $(get_lhs $arg)";;
            -e|--env)       envs+=" $2"; shift ;;
            diff)           actions+=" diff";;
            apply)          actions+=" apply";;
            compare)        actions="compare";; # will render
            *)
                if [[ -f ${arg} ]]; then def_files+=" ${arg}"
                elif [[ -d ${arg} ]]; then def_files+=" ${arg}/render*.def"
                else
                    echo unknown argument ${arg}, should be a command, file or directory with render*.def file
                    show_help
                    exit 1
                fi
        esac
        shift
    done
    if [[ -z $envs ]]; then envs=${RENDER_DEFAULT_ENVS:-tst}; fi
    envs=${envs//,/ }
    # better test that also works with one or more spaces, might be:
    #   if [[ ${envs:-} =~ '^ *$' ]]; then ...
    # see https://unix.stackexchange.com/questions/146942/how-can-i-test-if-a-variable-is-empty-or-contains-only-spaces
}


show_help() { cat <<EOF
$(filename ${scriptname}) [ option | command/action | alias | render-def ]...

Options:
  -h|--help     show this help
  -v|--verbose  give more output
  -q|--quiet    no output
  -e|--env <e>  render environment <e>
  --env=<e>     render environment <e> (can be used in alias)
Commands/actions
  help          show_help
  diff          run 'kubectl diff' with the rendered manifests
  apply         run 'kubectl apply' with the rendered manifests
  compare       compare to same appname in other directory
  commit        TODO: run 'git commit' (pull is implied)
  pull          TODO: run 'git pull' before starting to render, to avoid merge conflicts

Aliases:
It is possible to configure aliases specify an environment as follows '@lab'.
Shortcuts e.g. '@l' and even just 'l' or 'lab' are planned

Render Definitions:
Can either be a file, that will be sourced, or a directory that contains exactly 1 file with a name 'render*.def'.
EOF
}

################################################
# generic functions

init_generic() {
    action_funcs[diff]=run_diff
    action_funcs[apply]=run_apply
    action_funcs[compare]=run_compare
    env_dir=${base_dir}/envs
    manifest_dir=${base_dir}/manifests
    output_dir=${manifest_dir}/${env}/${appname}
    skip=false
}

run_diff() {
    info diffing $output_dir
    verbose kubectl diff ${kubectl_options[$env]} -f $output_dir
    kubectl diff ${kubectl_options[$env]} -f $output_dir || true
}

run_apply() {
    info applying $output_dir
    verbose kubectl apply ${kubectl_options[$env]} -f $output_dir
    kubectl apply ${kubectl_options[$env]} -f $output_dir
}


run_compare() {
    run_actions $rendef_file render
    newdir=$output_dir
    run_actions ${compare_dir}/$rendef_file render
    olddir=$output_dir
    info diffing $newdir $olddir
    pre_diff_cleanup $newdir $olddir
    diff -r $newdir $olddir || true
}

basic_cleanup () {
    verbose removing comments, rollme,
    sed -i -e '/^ *#/d' -e '/rollme/d' $1/*.yaml $2/*.yaml
    verbose fixing unneeded quotes
    sed -i -e 's/: "\([a-zA-Z].*\)"$/: \1/' $1/*.yaml $2/*.yaml
    sed -i -e 's/: "\([a-zA-Z0-9].*[a-zA-Z]\)"$/: \1/' $1/*.yaml $2/*.yaml
}

pre_diff_cleanup() {
    basic_cleanup $1 $2
}

split_into_files() {
    yq -s \"$output_dir/\"'+ (.kind | downcase) + "_" + .metadata.name + ".yaml"'
    rm -f ${output_dir}/_.yaml
}

################################################
# helm module

init_helm() {
    local file_dir=$(dirname ${rendef_file})
    base_dir=$(dirname $(dirname ${file_dir}))
    unset helm_charts
    init_generic
    action_funcs[render]=render_helm
    : ${helm_charts:=$charts}

    helm_release=$appname # this is probably not really used with helm template
    helm_command="helm template"
    helm_chart_dir=${base_dir}/helm-charts
    helm_value_files="${env_dir}/values-env-${env}.yaml"
    helm_value_files+=" $file_dir/values-app-${appname}.yaml"
    helm_value_files+=" $file_dir/values-${appname}-${env}.yaml"
    if [[ ! -f $file_dir/values-${appname}-${env}.yaml ]]; then skip=true; fi
}


render_helm() {
    local f
    #opts=${helm_opts:-}
    for f in $helm_value_files; do helm_command+=" -f ${f}"; done
    helm_command+=" $helm_release"
    for ch in $helm_charts; do
        verbose "    $helm_command $helm_chart_dir/$ch"
        $helm_command $helm_chart_dir/$ch| split_into_files
    done
}



main "${@}"
