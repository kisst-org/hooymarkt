#!/usr/bin/env bash
# Script Name: render-manifests
# Description: render helm manifests for applications and environments
# Author: Mark Hooijkaas
# Sourcecode: https://github.com/kisst-org/markisst/
# License: Apache License version 2.0
# Install or update to newest version with following command:
#   curl -OL https://raw.githubusercontent.com/kisst-org/markisst/refs/heads/main/render-manifests && chmod 755 render-manifests

set -eu


read_config() {
    declare -A -g aliases
    declare -A -g kubectl_options
    command=render_files
    if [[ -f ${RENDER_CONFIG_FILE} ]]; then
        source ${RENDER_CONFIG_FILE}
    fi
}


main() {
    : ${RENDER_CONFIG_FILE:=${RENDER_ROOT_DIR:-.}/render.config}
    read_config
    parse_options "${@}"
    $command
}

verbose() { if ${log_verbose:-false}; then printf "%s " "${@}"; echo; fi }
info()    { if ${log_info:-true};     then echo "${@}"; fi }

parse_options() {
    def_files=""
    envs=""
    while [ ! $# -eq 0 ]; do
        arg=$1
        if [[ ${aliases[$arg]:-none} != none ]]; then
            arg=${aliases[$arg]}
        fi
        case $arg in
            -h|--help)     show_help; exit 0;;
            -v|--verbose)  log_verbose=true; log_info=true;;
            -q|--quiet)    log_verbose=false; log_info=false;;
            -c|--charts)   force_charts=$2; shift ;;
            --debug)       set -x;;
            --env=*)       envs+=" ${arg#--env=}";;
            -e|--env)      envs+=" $2"; shift ;;
            --diff)        extra_cmd=diff;;
            --apply)       extra_cmd=apply;;
            --compare)     command=compare;;
            *)
                if [[ -f ${arg} ]]; then def_files+=" ${arg}"
                elif [[ -d ${arg} ]]; then def_files+=" ${arg}/render*.def"
                else
                    echo unknown argument ${arg}, should be a file or directory with render*.def file
                    show_help
                    exit 1
                fi
        esac
        shift
    done
    if [[ -z $envs ]]; then envs=${RENDER_DEFAULT_ENVS:-tst}; fi
    # better test that also works with one or more spaces, might be:
    #   if [[ ${envs:-} =~ '^ *$' ]]; then ...
    # see https://unix.stackexchange.com/questions/146942/how-can-i-test-if-a-variable-is-empty-or-contains-only-spaces

}


show_help() { cat <<EOF
render-manifests [options] [environment...] <render-def>...

Options:
  -h|--help     show this help
  -v|--verbose  give more output
  -q|--quiet    no output
  --diff        run 'kubectl diff' with the rendered manifests
  --apply       run 'kubectl apply' with the rendered manifests
  --compare     compare to other directory
  -c|--commit      run 'git commit' (--pull is implied)
  -p|--pull        run 'git pull' before starting to render, to avoid merge conflicts

Environments:
It is possible to specify an environment as follows '@lab'.
Shortcuts e.g. '@l' and even just 'l' or 'lab' are planned

Render Definitions:
Can either be a file, that will be sourced, or a directory that contains exactly 1 file with a name 'render-*.def'.
EOF
}

render_files() {
    for f in $def_files; do
        read_app_def $f
        verbose reading render-def ${f} for ${envs}
        for env in $envs; do
            render_def_file $f $env
        done
    done
}

merge_paths() {
    local root=$1
    local path=$2
    echo $root/$path
    return 0
    if [[ $path == /* ]]; then
        echo $path # absolute path
        return 0
    fi
    while [[ $path = .* ]]; do
        if [[ $path == ./* ]]; then
            path=${path#./}
        elif [[ $path == ./* ]]; then
            path=${path#../}
            root=$(dirname $root)
        fi
    done
    if [[ $path == /* ]]; then path=${path#/}; fi
    if [[ $root == */ ]]; then root=${root%/}; fi
    echo $root/$path
}

init_relative_dirs() {
    env_dir=$(merge_paths    ${1} ../../envs )
    chart_dir=$(merge_paths  ${1} ../../helm-charts)
    output_dir=$(merge_paths ${1} ../../manifests)
}


basic_cleanup () {
    verbose removing comments, rollme,
    sed -i -e '/^ *#/d' -e '/rollme/d' $1/*.yaml $2/*.yaml
    verbose fixing unneeded quotes
    sed -i -e 's/: "\([a-zA-Z].*\)"$/: \1/' $1/*.yaml $2/*.yaml
}

pre_diff_cleanup() {
    basic_cleanup $1 $2
}

compare() {
    for f in $def_files; do
        verbose comparing render-def ${f} for ${envs}
        for env in $envs; do
            read_app_def $f
            render_def_file $f $env
            newdir=manifests/$env/$appname
            read_app_def ${RENDER_COMPARE_DIR}/$f
            render_def_file ${RENDER_COMPARE_DIR}/$f $env
            olddir=${RENDER_COMPARE_DIR}/manifests/$env/$appname
            echo diffing $newdir $olddir
            pre_diff_cleanup $newdir $olddir
            diff -r $newdir $olddir
            #defdir=$(dirname  -f ${file})

        done
    done
}


read_app_def() {
    local file=$1
    # read the def file to determine  helm_charts
    unset helm_charts helm_chart_for
    declare -A helm_charts_for
    source ${file}
}


render_def_file() {
    file=$1
    env=$2
    init_relative_dirs $(dirname ${file})

    #source ${env_dir}/render-env-${env}.def
    defdir=$(dirname ${file})

    render_charts=${force_charts:-${helm_charts:-${charts}}}
    if [[ -f $defdir/values-${appname}-${env}.yaml ]]; then
        info rendering ${appname}-${env} with charts ${render_charts} to $output_dir
        dir=$output_dir/${env}/${appname}
        rm -rf $dir; mkdir -p $dir
        render_helm
    else
        info skipping ${appname}-${env}
    fi
}

if_file_exists() { if [[ -f $1 ]]; then echo " ${2:-} $1"; else echo "" ; fi }
render_helm() {
    release=$appname-$env # this is probably not really used with helm template
    defdir=$(dirname ${file})
    value_opts="-f ${env_dir}/values-env-${env}.yaml"
    value_opts+=" -f $defdir/values-app-${appname}.yaml"
    value_opts+=" -f $defdir/values-${appname}-${env}.yaml"
    for ch in $render_charts; do
        cmd="helm template $value_opts $release ${chart_dir}/$ch"
        verbose "    $cmd"
        $cmd | split_into_files
    done
    if [[ ${extra_cmd:-} == diff ]]; then
        info diffing $dir
        kubectl diff ${kubectl_options[$env]} -f $dir
    elif [[ ${extra_cmd:-} == apply ]]; then
        info applying $dir
        kubectl apply ${kubectl_options[$env]} -f $dir
    fi
}

split_into_files() {
    yq -s \"$dir/\"'+ (.kind | downcase) + "_" + .metadata.name + ".yaml"'
    rm -f ${dir}/_.yaml
}


main "${@}"
